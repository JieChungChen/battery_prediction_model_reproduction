import tensorflow as tf
from tensorflow.keras import layers
from tensorflow.keras.models import Model


def mish(inputs):
    x = tf.nn.softplus(inputs)
    x = tf.nn.tanh(x)
    x = tf.multiply(x, inputs)
    return x


def Dim_Reduction_1(input_shape):
    input_features = layers.Input(shape=input_shape)
    conv1_1 = layers.Conv1D(32, 5, padding='same', activation=mish)(input_features)
    conv1_2 = layers.Conv1D(32, 5, padding='same', activation=mish)(conv1_1)
    conv1_3 = layers.Conv1D(32, 5, padding='same', activation=mish)(conv1_2)
    conv1_4 = layers.Conv1D(32, 5, padding='same', activation=mish)(conv1_3)
    maxpool1_1 = layers.MaxPooling1D(pool_size=2, strides=2)(conv1_2)
    maxpool1_2 = layers.MaxPooling1D(pool_size=2, strides=2)(conv1_4)
    maxpool1_3 = layers.MaxPooling1D(pool_size=2, strides=2)(tf.concat([maxpool1_1, maxpool1_2], axis=2))
    spatial_drop1 = layers.SpatialDropout1D(0.16)(maxpool1_3)
    conv2_1 = layers.Conv1D(32, 11, padding='same', activation=mish)(spatial_drop1)
    conv2_2 = layers.Conv1D(32, 11, padding='same', activation=mish)(conv2_1)
    conv2_3 = layers.Conv1D(64, 7, padding='same', activation=mish)(conv2_2)
    conv2_4 = layers.Conv1D(64, 7, padding='same', activation=mish)(conv2_3)
    maxpool2_1 = layers.MaxPooling1D(pool_size=2, strides=2)(conv2_2)
    maxpool2_2 = layers.MaxPooling1D(pool_size=2, strides=2)(conv2_4)
    avgpool1 = layers.AveragePooling1D(pool_size=2, strides=2)(tf.concat([maxpool2_1, maxpool2_2], axis=2))
    conv3_1 = layers.Conv1D(256, 7, padding='same', activation=mish)(avgpool1)
    conv3_2 = layers.Conv1D(256, 7, padding='same', activation=mish)(conv3_1)
    conv3_3 = layers.Conv1D(256, 5, padding='same', activation=mish)(conv3_2)
    conv3_4 = layers.Conv1D(256, 5, padding='same', activation=mish)(conv3_3)
    spatial_drop2 = layers.SpatialDropout1D(0.16)(tf.concat([conv3_2, conv3_4], axis=2))
    gloavgpool = layers.GlobalAveragePooling1D()(spatial_drop2)
    glomaxpool = layers.GlobalMaxPooling1D()(spatial_drop2)
    output = layers.Dense(1)(tf.add(gloavgpool, glomaxpool))
    return Model(input_features, output)
    

def Dim_Reduction_2(input_shape):
    input_features = layers.Input(shape=input_shape)
    conv1_1 = layers.Conv1D(128, 11, padding='same', activation=mish)(input_features)
    conv1_2 = layers.Conv1D(128, 11, padding='same', activation=mish)(conv1_1)
    conv1_3 = layers.Conv1D(128, 5, padding='same', activation=mish)(conv1_2)
    conv1_4 = layers.Conv1D(128, 5, padding='same', activation=mish)(conv1_3)
    avgpool1_1 = layers.AveragePooling1D(pool_size=2, strides=2)(conv1_2)
    avgpool1_2 = layers.AveragePooling1D(pool_size=2, strides=2)(conv1_4)
    spatial_drop1 = layers.SpatialDropout1D(0.16)(tf.concat([avgpool1_1, avgpool1_2], axis=2))
    conv2_1 = layers.Conv1D(128, 3, padding='same', activation=mish)(spatial_drop1)
    conv2_2 = layers.Conv1D(128, 3, padding='same', activation=mish)(conv2_1)
    conv2_3 = layers.Conv1D(128, 5, padding='same', activation=mish)(conv2_2)
    conv2_4 = layers.Conv1D(128, 5, padding='same', activation=mish)(conv2_3)
    maxpool2_1 = layers.MaxPooling1D(pool_size=2, strides=2)(conv2_2)
    maxpool2_2 = layers.MaxPooling1D(pool_size=2, strides=2)(conv2_4)
    avgpool1 = layers.AveragePooling1D(pool_size=2, strides=2)(tf.concat([maxpool2_1, maxpool2_2], axis=2))
    gloavgpool = layers.GlobalAveragePooling1D()(avgpool1)
    glomaxpool = layers.GlobalMaxPooling1D()(avgpool1)
    linear1 = layers.Dense(256)(tf.add(gloavgpool, glomaxpool))
    output = layers.Dense(1)(linear1)
    return Model(input_features, output)


def Predictor_1(input_shape, drop_rate):
    input_features = layers.Input(shape=input_shape)
    conv1_1 = layers.Conv1D(64, 11, padding='same', activation=mish, kernel_regularizer=tf.keras.regularizers.L2(0.001))(input_features)
    conv1_2 = layers.Conv1D(128, 7, padding='same', activation=mish)(conv1_1)
    conv1_3 = layers.Conv1D(256, 5, padding='same', activation=mish)(conv1_2)
    spatial_drop1 = layers.SpatialDropout1D(drop_rate)(conv1_3)
    avgpool1 = layers.AveragePooling1D(pool_size=2, strides=2)(spatial_drop1)
    conv2_1 = layers.Conv1D(64, 11, padding='same', activation=mish)(avgpool1)
    conv2_2 = layers.Conv1D(64, 7, padding='same', activation=mish)(avgpool1)
    dotted = layers.dot([conv2_1, conv2_2], axes=(2, 2))
    activation = layers.Activation(tf.nn.sigmoid)(dotted)
    gloavgpool1_1 = layers.GlobalAveragePooling1D()(activation)
    gloavgpool1_2 = layers.GlobalAveragePooling1D()(conv2_1)
    concat1 = layers.Concatenate(axis=1)([gloavgpool1_1, gloavgpool1_2])
    reshape = layers.Reshape((-1, 1))(concat1)
    conv3_1 = layers.Conv1D(64, 9, padding='valid', activation=mish)(reshape)
    conv3_2 = layers.Conv1D(32, 7, padding='valid', activation=mish)(conv3_1)
    conv3_3 = layers.Conv1D(128, 7, padding='valid', activation=mish, kernel_regularizer=tf.keras.regularizers.L2(0.001))(conv3_2)
    conv4_1 = layers.Conv1D(128, 7, padding='valid', activation=mish)(reshape)
    conv4_2 = layers.Conv1D(256, 11, padding='valid', activation=mish)(conv4_1)
    conv4_3 = layers.Conv1D(256, 3, padding='valid', activation=mish, kernel_regularizer=tf.keras.regularizers.L2(0.001))(conv4_2)
    gloavgpool2 = layers.GlobalAveragePooling1D()(conv3_3)
    glomaxpool2 = layers.GlobalMaxPooling1D()(conv3_3)
    gloavgpool3 = layers.GlobalAveragePooling1D()(conv4_3)
    glomaxpool3 = layers.GlobalMaxPooling1D()(conv4_3)
    linear_1 = layers.Dense(1)(layers.Add()([gloavgpool2, glomaxpool2]))
    linear_2 = layers.Dense(1)(layers.Add()([gloavgpool3, glomaxpool3]))
    output = layers.Concatenate(axis=1)([linear_1, linear_2])
    return Model(input_features, output)